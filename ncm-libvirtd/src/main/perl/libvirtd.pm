################################################################################
#
# VERSION:    @VERSION@, @DATE@
# AUTHOR:     @AUTHOR@
# MAINTAINER: @MAINTAINER@
# LICENSE:    @LICENSE@
#
################################################################################

package NCM::Component::@COMP@;

use strict;
use warnings;
use NCM::Component;
use EDG::WP4::CCM::Property;
use NCM::Check;
use FileHandle;
use File::Basename;

use CAF::FileWriter;
use CAF::Process;
use LC::File qw (makedir);

use constant PATH => '/software/components/@COMP@';
use constant COMPONENT_NAME => '@COMP@';

our @ISA = qw (NCM::Component);
our $EC = LC::Exception::Context->new->will_store_all;

# If the value isn't a number, then quotes are added.
sub quoteValue {
    my ($v) = @_;
    return (($v =~ /^\d*$/) ? $v :  '"' . $v . '"');    
}

# Write out hash as sequence of key/value pairs.
sub writeKeyValuePairs {
    my (%pairs) = %{$_[0]};

    my @entries;
    foreach my $k (sort keys %pairs) {
        my $v = quoteValue($pairs{$k});
        push @entries, $k . '=' . $v;
    }

    $_[1] .= join("\n", @entries) . "\n";
}

sub listToString {
    my (@entries) = @{$_[0]};
}

# Write out the authorization parameters.
sub writeAuthz {
    my (%pairs) = %{$_[0]};

    my $v = $pairs{'tls_no_verify_certificate'};
    $_[1] .= 'tls_no_verify_certificate=' . $v . "\n" if defined($v);

    my @entries = @pairs{'tls_allowed_dn_list'};
    if (defined(@entries)) {
	my $s = join(' ', @entries);
	$_[1] .= 'tls_allowed_dn_list="' . $s . "\"\n";
    }

    @entries = @pairs{'sasl_allowed_username_list'};
    if (defined(@entries)) {
	my $s = join(' ', @entries);
	$_[1] .= 'sasl_allowed_username_list="' . $s . "\"\n";
    }

}

# Write out the logging parameters.
sub writeLogging {
    my (%pairs) = %{$_[0]};

    my $v = $pairs{'log_level'};
    $_[1] .= 'log_level=' . $v . "\n" if defined($v);

    my @entries = @pairs{'log_filter'};
    if (defined(@entries)) {
	my $s = join(' ', @entries);
	$_[1] .= 'log_filter="' . $s . "\"\n";
    }

    @entries = @pairs{'log_outputs'};
    if (defined(@entries)) {
	my $s = join(' ', @entries);
	$_[1] .= 'log_outputs="' . $s . "\"\n";
    }

}

# Restart the process.
sub restartDaemon {
    CAF::Process->new([qw(/etc/init.d/libvirtd restart)], log => $self)->run();
}

sub Configure {
    my ($self, $config) = @_;

    my $t = $config->getElement(PATH)->getTree;

    # First retrieve the configuration file location.
    my $libvirtd_config = $t->{'libvirtd_config'};
    my $config_dir = basename($libvirtd_config);
    if (!makedir($config_dir, 0755)) {
        $self->error("Failed to create configuration directory: $config_dir");
        return;
    }

    # Accumulate the configuration in a string.
    my $contents = 
        "#\n". 
        '# autogenerated by ' . 
        COMPONENT_NAME .
        " configuration module\n" . 
        "#\n";

    my %pairs;

    $contents .= "\n# networking parameters\n\n";
    %pairs = %{$t->{'network'}};
    writeKeyValuePairs(\%pairs, $contents) if (%pairs);

    $contents .= "\n# unix socket parameters\n\n";
    %pairs = %{$t->{'socket'}};
    writeKeyValuePairs(\%pairs, $contents) if (%pairs);

    $contents .= "\n# authentication parameters\n\n";
    %pairs = %{$t->{'authn'}};
    writeKeyValuePairs(\%pairs, $contents) if (%pairs);

    $contents .= "\n# networking parameters\n\n";
    %pairs = %{$t->{'network'}};
    writeKeyValuePairs(\%pairs, $contents) if (%pairs);

    $contents .= "\n# TLS parameters\n\n";
    %pairs = %{$t->{'tls'}};
    writeKeyValuePairs(\%pairs, $contents) if (%pairs);

    $contents .= "\n# authorization parameters\n\n";
    %pairs = %{$t->{'authz'}};
    writeAuthz(\%pairs, $contents) if (%pairs);

    $contents .= "\n# authorization parameters\n\n";
    %pairs = %{$t->{'authz'}};
    writeKeyValuePairs(\%pairs, $contents) if (%pairs);

    $contents .= "\n# processing control parameters\n\n";
    %pairs = %{$t->{'processing'}};
    writeKeyValuePairs(\%pairs, $contents) if (%pairs);

    $contents .= "\n# logging parameters\n\n";
    %pairs = %{$t->{'logging'}};
    writeKeyValuePairs(\%pairs, $contents) if (%pairs);

    # Write out the contents of the configuration file.
    my $fh = CAF::FileWriter->open("$oned_config");
    print $fh $contents;
    my $config_changed = $fh->close();

    # If configuration has changed restart the service.
    restartDaemon() if ($config_changed);

    return 1;
}

1;
