
@BUILD_INFO@
@LEGAL@

package NCM::Component::@COMP@;

use strict;
use warnings;
use NCM::Component;
use EDG::WP4::CCM::Property;
use NCM::Check;
use FileHandle;
use File::Basename;

use CAF::FileWriter;
use CAF::Process;
use LC::File qw (makedir);

our $VERSION = q{@VERSION@};

use Readonly;
Readonly::Scalar $EMPTY => q{};
Readonly::Scalar $PATH => '/software/components/@COMP@';
Readonly::Scalar $COMPONENT_NAME => '@COMP@';

use base qw (NCM::Component);

our $EC = LC::Exception::Context->new->will_store_all;

# If the value isn't a number, then quotes are added.
sub quoteValue {
    my ($v) = @_;
    return (($v =~ m{^\d*$}x) ? $v :  q{"} . $v . q{"});
}

# Write out hash as sequence of key/value pairs.
sub writeKeyValuePairs {
    my ($href) = @_;
 
    my %pairs = %{$href};

    my @entries;
    foreach my $k (sort keys %pairs) {
        my $v = quoteValue($pairs{$k});
        push @entries, "$k=$v";
    }

    return join("\n", @entries) . "\n";
}

# Write out the database parameters.
sub writeDatabaseParams {
    my ($href) = @_;

    my %pairs = %{$href};

    my @entries;
    foreach my $k (sort keys %pairs) {
        my $v = quoteValue($pairs{$k});
        push @entries, "$k=$v";
    }

    my $contents = 'DB=[ ';
    $contents .= join(",\n    ", @entries);
    $contents .= " ]\n";

    return $contents;
}

# Write a single MAD definition.  
sub writeMad {
    my ($href, $name) = @_;

    my %pairs = %{$href};

    my $label = $pairs{'manager'} . '_MAD';

    my @entries;
    push @entries, 'name="' . $name . q{"};
    foreach my $k (sort keys %pairs) {
        if ($k ne 'manager') {
            my $v = quoteValue($pairs{$k});
            push @entries, "$k=$v";
        }
    }

    my $contents = $label . '=[ ';
    $contents .= join(",\n    ", @entries);
    $contents .= " ]\n\n";

    return $contents;
}

# Process a hash of MAD definitions.
sub processMads {
    my ($href) = @_;

    my %pairs = %{$href};

    my $contents = $EMPTY;

    foreach my $k (sort keys %pairs) {
        my %hvalue = %{$pairs{$k}};
        $contents .= writeMad(\%hvalue, $k);
    }

    return $contents;
}

# Process a single hook definition.
sub writeHook {
    my ($href, $name) = @_;

    my %pairs = %{$href};

    my @entries;
    push @entries, 'name="' . $name . q{"};
    foreach my $k (sort keys %pairs) {
        my $v = quoteValue($pairs{$k});
        push @entries, "$k=$v";
    }

    my $contents = 'VM_HOOK=[ ';
    $contents .= join(",\n    ", @entries);
    $contents .= " ]\n\n";

    return $contents;
}

# Process a hash of hook definitions.
sub processHooks {
    my ($href) = @_;

    my %pairs = %{$href};

    my $contents = $EMPTY;

    foreach my $k (sort keys %pairs) {
        my %hvalue = %{$pairs{$k}};
        $contents .= writeHook(\%hvalue, $k);
    }

    return $contents;
}

# Restart the process.
sub restartDaemon {
    CAF::Process->new([qw(/etc/init.d/oned restart)], log => $self)->run();
    return;
}

sub Configure {
    my ($self, $config) = @_;

    my $t = $config->getElement($PATH)->getTree;

    # First retrieve the configuration file location.
    my $oned_config = $t->{'oned_config'};
    my $config_dir = basename($oned_config);
    if (!makedir($config_dir, oct(755))) {
        $self->error("Failed to create configuration directory: $config_dir");
        return;
    }

    # Accumulate the configuration in a string.
    my $contents = 
        "#\n". 
        "# autogenerated by $COMPONENT_NAME configuration module\n" . 
        "#\n";

    $contents .= "\n# general parameters\n\n";
    my %pairs = %{$t->{'daemon'}};
    $contents .= writeKeyValuePairs(\%pairs);

    $contents .= "\n# database parameters\n\n";
    %pairs = %{$t->{'db'}};
    $contents .= writeDatabaseParams(\%pairs);

    $contents .= "\n# networking parameters\n\n";
    %pairs = %{$t->{'network'}};
    $contents .= writeKeyValuePairs(\%pairs);

    $contents .= "\n# image repository parameters\n\n";
    %pairs = %{$t->{'image_repos'}};
    $contents .= writeKeyValuePairs(\%pairs);

    $contents .= "\n# MAD definitions\n\n";
    %pairs = %{$t->{'mads'}};
    $contents .= processMads(\%pairs);

    $contents .= "\n# hook definitions\n\n";
    %pairs = %{$t->{'hooks'}};
    $contents .= processHooks(\%pairs);

    # Write out the contents of the configuration file.
    my $fh = CAF::FileWriter->open("$oned_config");
    print $fh $contents;
    my $config_changed = $fh->close();

    # If configuration has changed restart the service.
    if ($config_changed) {
	restartDaemon();
    }

    return 1;
}

1;
